<?xml version="1.0"?>
<CommandFile xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
  <transaction name="MyVideosDBSQL_v32_to_v33">
    <command type="DB">
      <description>change Source (name) to idSource in table movie / remove UseFolder</description>
      <execute>
        CREATE TABLE movie01(
        idMovie,
        MoviePath,
        Type,
        ListTitle,
        HasSub,
        "New",
        Mark,
        Source,
        Imdb,
        Lock,
        Title,
        OriginalTitle,
        Year,
        Rating,
        Votes,
        MPAA,
        Top250,
        Country,
        Outline,
        Plot,
        Tagline,
        Certification,
        Genre,
        Studio,
        Runtime,
        ReleaseDate,
        Director,
        Credits,
        Playcount,
        Trailer,
        EThumbsPath,
        NfoPath,
        TrailerPath,
        SubPath,
        FanartURL,
        OutOfTolerance,
        VideoSource,
        SortTitle,
        DateAdded,
        EFanartsPath,
        ThemePath,
        TMDB,
        TMDBColID,
        DateModified,
        MarkCustom1,
        MarkCustom2,
        MarkCustom3,
        MarkCustom4,
        HasSet,
        iLastPlayed,
        Language
        );

        INSERT INTO movie01
        SELECT
        idMovie,
        MoviePath,
        Type,
        ListTitle,
        HasSub,
        "New",
        Mark,
        Source,
        Imdb,
        Lock,
        Title,
        OriginalTitle,
        Year,
        Rating,
        Votes,
        MPAA,
        Top250,
        Country,
        Outline,
        Plot,
        Tagline,
        Certification,
        Genre,
        Studio,
        Runtime,
        ReleaseDate,
        Director,
        Credits,
        Playcount,
        Trailer,
        EThumbsPath,
        NfoPath,
        TrailerPath,
        SubPath,
        FanartURL,
        OutOfTolerance,
        VideoSource,
        SortTitle,
        DateAdded,
        EFanartsPath,
        ThemePath,
        TMDB,
        TMDBColID,
        DateModified,
        MarkCustom1,
        MarkCustom2,
        MarkCustom3,
        MarkCustom4,
        HasSet,
        iLastPlayed,
        Language
        FROM movie;

        DROP TABLE movie;

        CREATE TABLE movie (
        idMovie         integer PRIMARY KEY AUTOINCREMENT,
        idSource        integer NOT NULL,
        MoviePath       text,
        Type            bool,
        ListTitle       text,
        HasSub          bool NOT NULL DEFAULT 0,
        "New"           bool NOT NULL DEFAULT 0,
        Mark            bool NOT NULL DEFAULT 0,
        Imdb            text,
        Lock            bool,
        Title           text,
        OriginalTitle   text,
        Year            text,
        Rating          text,
        Votes           text,
        MPAA            text,
        Top250          text,
        Country         text,
        Outline         text,
        Plot            text,
        Tagline         text,
        Certification   text,
        Genre           text,
        Studio          text,
        Runtime         text,
        ReleaseDate     text,
        Director        text,
        Credits         text,
        Playcount       integer,
        Trailer         text,
        EThumbsPath     text,
        NfoPath         text,
        TrailerPath     text,
        SubPath         text,
        FanartURL       text,
        OutOfTolerance  bool,
        VideoSource     text,
        SortTitle       text,
        DateAdded       integer,
        EFanartsPath    text,
        ThemePath       text,
        TMDB            text,
        TMDBColID       text,
        DateModified    integer,
        MarkCustom1     bool NOT NULL DEFAULT 0,
        MarkCustom2     bool NOT NULL DEFAULT 0,
        MarkCustom3     bool NOT NULL DEFAULT 0,
        MarkCustom4     bool NOT NULL DEFAULT 0,
        HasSet          bool NOT NULL DEFAULT 0,
        iLastPlayed     integer,
        Language        text
        );

        CREATE TRIGGER delete_movie
        AFTER DELETE
        ON movie
        BEGIN
        DELETE FROM actorlinkmovie WHERE idMovie=old.idMovie;
        DELETE FROM art WHERE media_id=old.idMovie AND media_type='movie';
        DELETE FROM countrylinkmovie WHERE idMovie=old.idMovie;
        DELETE FROM directorlinkmovie WHERE idMovie=old.idMovie;
        DELETE FROM genrelinkmovie WHERE idMovie=old.idMovie;
        DELETE FROM movielinktvshow WHERE idMovie=old.idMovie;
        DELETE FROM studiolinkmovie WHERE idMovie=old.idMovie;
        DELETE FROM taglinks WHERE idMedia=old.idMovie AND media_type='movie';
        DELETE FROM writerlinkmovie WHERE idMovie=old.idMovie;
        DELETE FROM MoviesAStreams WHERE MovieID=old.idMovie;
        DELETE FROM MoviesSets WHERE MovieID=old.idMovie;
        DELETE FROM MoviesSubs WHERE MovieID=old.idMovie;
        DELETE FROM MoviesVStreams WHERE MovieID=old.idMovie;
        END;

        INSERT INTO movie
        (idMovie,
        idSource,
        MoviePath,
        Type,
        ListTitle,
        HasSub,
        "New",
        Mark,
        Imdb,
        Lock,
        Title,
        OriginalTitle,
        Year,
        Rating,
        Votes,
        MPAA,
        Top250,
        Country,
        Outline,
        Plot,
        Tagline,
        Certification,
        Genre,
        Studio,
        Runtime,
        ReleaseDate,
        Director,
        Credits,
        Playcount,
        Trailer,
        EThumbsPath,
        NfoPath,
        TrailerPath,
        SubPath,
        FanartURL,
        OutOfTolerance,
        VideoSource,
        SortTitle,
        DateAdded,
        EFanartsPath,
        ThemePath,
        TMDB,
        TMDBColID,
        DateModified,
        MarkCustom1,
        MarkCustom2,
        MarkCustom3,
        MarkCustom4,
        HasSet,
        iLastPlayed,
        Language)
        SELECT
        movie01.idMovie,
        Sources.ID,
        movie01.MoviePath,
        movie01.Type,
        movie01.ListTitle,
        movie01.HasSub,
        movie01.New,
        movie01.Mark,
        movie01.Imdb,
        movie01.Lock,
        movie01.Title,
        movie01.OriginalTitle,
        movie01.Year,
        movie01.Rating,
        movie01.Votes,
        movie01.MPAA,
        movie01.Top250,
        movie01.Country,
        movie01.Outline,
        movie01.Plot,
        movie01.Tagline,
        movie01.Certification,
        movie01.Genre,
        movie01.Studio,
        movie01.Runtime,
        movie01.ReleaseDate,
        movie01.Director,
        movie01.Credits,
        movie01.Playcount,
        movie01.Trailer,
        movie01.EThumbsPath,
        movie01.NfoPath,
        movie01.TrailerPath,
        movie01.SubPath,
        movie01.FanartURL,
        movie01.OutOfTolerance,
        movie01.VideoSource,
        movie01.SortTitle,
        movie01.DateAdded,
        movie01.EFanartsPath,
        movie01.ThemePath,
        movie01.TMDB,
        movie01.TMDBColID,
        movie01.DateModified,
        movie01.MarkCustom1,
        movie01.MarkCustom2,
        movie01.MarkCustom3,
        movie01.MarkCustom4,
        movie01.HasSet,
        movie01.iLastPlayed,
        movie01.Language
        FROM
        Sources
        INNER JOIN movie01 ON (Sources.Name = movie01.Source);

        DROP TABLE movie01;
      </execute>
    </command>
    <command type="DB">
      <description>change Source (name) to idSource in table tvshow</description>
      <execute>
        CREATE TABLE tvshow01(
        idShow,
        ListTitle,
        "New",
        Mark,
        TVShowPath,
        Source,
        TVDB,
        Lock,
        EpisodeGuide,
        Plot,
        Genre,
        Premiered,
        Studio,
        MPAA,
        Rating,
        NfoPath,
        Language,
        Ordering,
        Status,
        ThemePath,
        EFanartsPath,
        Runtime,
        Title,
        Votes,
        EpisodeSorting,
        SortTitle,
        strIMDB,
        strTMDB,
        strOriginalTitle
        );

        INSERT INTO tvshow01
        SELECT
        idShow,
        ListTitle,
        "New",
        Mark,
        TVShowPath,
        Source,
        TVDB,
        Lock,
        EpisodeGuide,
        Plot,
        Genre,
        Premiered,
        Studio,
        MPAA,
        Rating,
        NfoPath,
        Language,
        Ordering,
        Status,
        ThemePath,
        EFanartsPath,
        Runtime,
        Title,
        Votes,
        EpisodeSorting,
        SortTitle,
        strIMDB,
        strTMDB,
        strOriginalTitle
        FROM tvshow;

        DROP TABLE tvshow;

        CREATE TABLE tvshow (
        idShow            integer PRIMARY KEY AUTOINCREMENT,
        idSource          integer NOT NULL,
        ListTitle         text,
        "New"             bool DEFAULT 0,
        Mark              bool NOT NULL DEFAULT 0,
        TVShowPath        text NOT NULL,
        TVDB              text,
        Lock              bool NOT NULL DEFAULT 0,
        EpisodeGuide      text,
        Plot              text,
        Genre             text,
        Premiered         text,
        Studio            text,
        MPAA              text,
        Rating            text,
        NfoPath           text,
        Language          text,
        Ordering          integer NOT NULL DEFAULT 0,
        Status            text,
        ThemePath         text,
        EFanartsPath      text,
        Runtime           text,
        Title             text,
        Votes             text,
        EpisodeSorting    integer NOT NULL DEFAULT 0,
        SortTitle         text,
        strIMDB           text,
        strTMDB           text,
        strOriginalTitle  text
        );

        CREATE UNIQUE INDEX UniqueTVShowPath
        ON tvshow
        (TVShowPath);

        CREATE TRIGGER delete_tvshow
        AFTER DELETE
        ON tvshow
        BEGIN
        DELETE FROM actorlinktvshow WHERE idShow=old.idShow;
        DELETE FROM art WHERE media_id=old.idShow AND media_type='tvshow';
        DELETE FROM creatorlinktvshow WHERE idShow=old.idShow;
        DELETE FROM countrylinktvshow WHERE idShow=old.idShow;
        DELETE FROM directorlinktvshow WHERE idShow=old.idShow;
        DELETE FROM genrelinktvshow WHERE idShow=old.idShow;
        DELETE FROM movielinktvshow WHERE idShow=old.idShow;
        DELETE FROM seasons WHERE idShow=old.idShow;
        DELETE FROM studiolinktvshow WHERE idShow=old.idShow;
        DELETE FROM taglinks WHERE idMedia=old.idShow AND media_type='tvshow';
        END;

        INSERT INTO tvshow
        (idShow,
        idSource,
        ListTitle,
        "New",
        Mark,
        TVShowPath,
        TVDB,
        Lock,
        EpisodeGuide,
        Plot,
        Genre,
        Premiered,
        Studio,
        MPAA,
        Rating,
        NfoPath,
        Language,
        Ordering,
        Status,
        ThemePath,
        EFanartsPath,
        Runtime,
        Title,
        Votes,
        EpisodeSorting,
        SortTitle,
        strIMDB,
        strTMDB,
        strOriginalTitle)
        SELECT
        tvshow01.idShow,
        TVSources.ID,
        tvshow01.ListTitle,
        tvshow01.New,
        tvshow01.Mark,
        tvshow01.TVShowPath,
        tvshow01.TVDB,
        tvshow01.Lock,
        tvshow01.EpisodeGuide,
        tvshow01.Plot,
        tvshow01.Genre,
        tvshow01.Premiered,
        tvshow01.Studio,
        tvshow01.MPAA,
        tvshow01.Rating,
        tvshow01.NfoPath,
        tvshow01.Language,
        tvshow01.Ordering,
        tvshow01.Status,
        tvshow01.ThemePath,
        tvshow01.EFanartsPath,
        tvshow01.Runtime,
        tvshow01.Title,
        tvshow01.Votes,
        tvshow01.EpisodeSorting,
        tvshow01.SortTitle,
        tvshow01.strIMDB,
        tvshow01.strTMDB,
        tvshow01.strOriginalTitle
        FROM
        TVSources
        INNER JOIN tvshow01 ON (TVSources.Name = tvshow01.Source);

        DROP TABLE tvshow01;
      </execute>
    </command>
    <command type="DB">
      <description>change Source (name) to idSource in table episode</description>
      <execute>
        CREATE TABLE episode01(
        idEpisode,
        idShow,
        idFile,
        Episode,
        Title,
        "New",
        Mark,
        Source,
        Lock,
        Season,
        Rating,
        Plot,
        Aired,
        Director,
        Credits,
        NfoPath,
        Playcount,
        DisplaySeason,
        DisplayEpisode,
        DateAdded,
        Runtime,
        Votes,
        VideoSource,
        HasSub,
        SubEpisode,
        iLastPlayed,
        strIMDB,
        strTMDB,
        strTVDB
      );

      INSERT INTO episode01
      SELECT
        idEpisode,
        idShow,
        idFile,
        Episode,
        Title,
        "New",
        Mark,
        Source,
        Lock,
        Season,
        Rating,
        Plot,
        Aired,
        Director,
        Credits,
        NfoPath,
        Playcount,
        DisplaySeason,
        DisplayEpisode,
        DateAdded,
        Runtime,
        Votes,
        VideoSource,
        HasSub,
        SubEpisode,
        iLastPlayed,
        strIMDB,
        strTMDB,
        strTVDB
      FROM episode;

      DROP TABLE episode;

      CREATE TABLE episode (
        idEpisode       integer PRIMARY KEY AUTOINCREMENT,
        idShow          integer NOT NULL,
        idFile          integer NOT NULL,
        idSource        integer NOT NULL,
        Episode         integer,
        Title           text,
        "New"           bool DEFAULT 0,
        Mark            bool NOT NULL DEFAULT 0,
        Lock            bool NOT NULL DEFAULT 0,
        Season          integer,
        Rating          text,
        Plot            text,
        Aired           text,
        Director        text,
        Credits         text,
        NfoPath         text,
        Playcount       integer,
        DisplaySeason   integer,
        DisplayEpisode  integer,
        DateAdded       integer,
        Runtime         text,
        Votes           text,
        VideoSource     text,
        HasSub          bool NOT NULL DEFAULT 0,
        SubEpisode      integer,
        iLastPlayed     integer,
        strIMDB         text,
        strTMDB         text,
        strTVDB         text
      );

      CREATE TRIGGER delete_episode
        AFTER DELETE
        ON episode
      BEGIN
              DELETE FROM actorlinkepisode WHERE idEpisode=old.idEpisode;
              DELETE FROM art WHERE media_id=old.idEpisode AND media_type='episode';
              DELETE FROM directorlinkepisode WHERE idEpisode=old.idEpisode;
              DELETE FROM files WHERE idFile=old.idFile;
              DELETE FROM gueststarlinkepisode WHERE idEpisode=old.idEpisode;
              DELETE FROM writerlinkepisode WHERE idEpisode=old.idEpisode;
              DELETE FROM TVVStreams WHERE TVEpID=old.idEpisode;
              DELETE FROM TVAStreams WHERE TVEpID=old.idEpisode;
              DELETE FROM TVSubs WHERE TVEpID=old.idEpisode;
              END;

      INSERT INTO episode
        (idEpisode,
        idShow,
        idFile,
        idSource,
        Episode,
        Title,
        "New",
        Mark,
        Lock,
        Season,
        Rating,
        Plot,
        Aired,
        Director,
        Credits,
        NfoPath,
        Playcount,
        DisplaySeason,
        DisplayEpisode,
        DateAdded,
        Runtime,
        Votes,
        VideoSource,
        HasSub,
        SubEpisode,
        iLastPlayed,
        strIMDB,
        strTMDB,
        strTVDB)
      SELECT
        episode01.idEpisode,
        episode01.idShow,
        episode01.idFile,
        TVSources.ID,
        episode01.Episode,
        episode01.Title,
        episode01."New",
        episode01.Mark,
        episode01.Lock,
        episode01.Season,
        episode01.Rating,
        episode01.Plot,
        episode01.Aired,
        episode01.Director,
        episode01.Credits,
        episode01.NfoPath,
        episode01.Playcount,
        episode01.DisplaySeason,
        episode01.DisplayEpisode,
        episode01.DateAdded,
        episode01.Runtime,
        episode01.Votes,
        episode01.VideoSource,
        episode01.HasSub,
        episode01.SubEpisode,
        episode01.iLastPlayed,
        episode01.strIMDB,
        episode01.strTMDB,
        episode01.strTVDB
        FROM
        TVSources
        INNER JOIN episode01 ON (TVSources.Name = episode01.Source);

      DROP TABLE episode01;
      </execute>
    </command>
    <command type="DB">
      <description>rename table Sources to moviesource / change ID to idSource</description>
      <execute>
        CREATE TABLE Sources01(
        ID,
        Name,
        Path,
        Recursive,
        Foldername,
        Single,
        LastScan,
        Exclude,
        GetYear,
        Language
        );

        INSERT INTO Sources01
        SELECT
        ID,
        Name,
        Path,
        Recursive,
        Foldername,
        Single,
        LastScan,
        Exclude,
        GetYear,
        Language
        FROM Sources;

        DROP TABLE Sources;

        CREATE TABLE moviesource (
        idSource       integer PRIMARY KEY AUTOINCREMENT,
        strName        text NOT NULL,
        strPath        text NOT NULL,
        bRecursive     bool NOT NULL DEFAULT 0,
        bFoldername    bool NOT NULL DEFAULT 0,
        bSingle        bool NOT NULL DEFAULT 0,
        strLastScan    text NOT NULL DEFAULT '1900/01/01',
        bExclude       bool NOT NULL DEFAULT 0,
        bGetYear       bool NOT NULL DEFAULT 1,
        strLanguage    text NOT NULL DEFAULT en
        );

        CREATE UNIQUE INDEX UniqueMovieSourcePath
        ON moviesource
        (strPath);

        CREATE TRIGGER delete_moviesource
        AFTER DELETE
        ON moviesource
        BEGIN
        DELETE FROM movie WHERE idSource=old.idSource;
        END;

        INSERT INTO moviesource
        (idSource,
        strName,
        strPath,
        bRecursive,
        bFoldername,
        bSingle,
        strLastScan,
        bExclude,
        bGetYear,
        strLanguage)
        SELECT
        ID,
        Name,
        Path,
        Recursive,
        Foldername,
        Single,
        LastScan,
        Exclude,
        GetYear,
        Language
        FROM Sources01;

        DROP TABLE Sources01;
      </execute>
    </command>
    <command type="DB">
      <description>rename table TVSources to tvshowsource / change ID to idSource</description>
      <execute>
        CREATE TABLE TVSources01(
        ID,
        Name,
        Path,
        LastScan,
        Language,
        Ordering,
        Exclude,
        EpisodeSorting
        );

        INSERT INTO TVSources01
        SELECT
        ID,
        Name,
        Path,
        LastScan,
        Language,
        Ordering,
        Exclude,
        EpisodeSorting
        FROM TVSources;

        DROP TABLE TVSources;

        CREATE TABLE tvshowsource(
        idSource			INTEGER PRIMARY KEY AUTOINCREMENT,
        strName				TEXT NOT NULL,
        strPath				TEXT NOT NULL,
        strLastScan			TEXT NOT NULL DEFAULT '1900/01/01',
        strLanguage			TEXT NOT NULL DEFAULT en,
        iOrdering			INTEGER NOT NULL DEFAULT 0,
        bExclude			BOOL NOT NULL DEFAULT 0,
        iEpisodeSorting		INTEGER NOT NULL DEFAULT 0
        );
        CREATE UNIQUE INDEX UniqueTVShowSourcePath ON tvshowsource (strPath);

        CREATE TRIGGER delete_tvshowsource
        AFTER DELETE
        ON tvshowsource
        BEGIN
        DELETE FROM tvshow WHERE idSource=old.idSource;
        END;

        INSERT INTO tvshowsource
        (idSource,
        strName,
        strPath,
        strLastScan,
        strLanguage,
        iOrdering,
        bExclude,
        iEpisodeSorting)
        SELECT
        ID,
        Name,
        Path,
        LastScan,
        Language,
        Ordering,
        Exclude,
        EpisodeSorting
        FROM TVSources01;

        DROP TABLE TVSources01;
      </execute>
    </command>
    <command type="DB">
      <description>edit view episodelist</description>
      <execute>
        DROP VIEW episodelist;

        CREATE VIEW episodelist
        AS
        SELECT
        episode.*,
        source.strName AS Source,
        fanart.url AS FanartPath,
        poster.url AS PosterPath,
        CASE WHEN episode.idFile IS -1 THEN 1 ELSE 0 END AS Missing
        FROM
        episode
        LEFT OUTER JOIN tvshowsource AS source ON (source.idSource = episode.idSource)
        LEFT OUTER JOIN art AS fanart ON (fanart.media_id = episode.idEpisode)
        AND (fanart.media_type = 'episode')
        AND (fanart.type = 'fanart')
        LEFT OUTER JOIN art AS poster ON (poster.media_id = episode.idEpisode)
        AND (poster.media_type = 'episode')
        AND (poster.type = 'thumb');
      </execute>
    </command>
    <command type="DB">
      <description>edit view movielist</description>
      <execute>
        DROP VIEW movielist;

        CREATE VIEW movielist
        AS
        SELECT
        movie.*,
        CASE WHEN movie.SortTitle IS NOT '' THEN movie.SortTitle ELSE movie.ListTitle END AS SortedTitle,
        source.strName AS Source,
        banner.url AS BannerPath,
        clearart.url AS ClearArtPath,
        clearlogo.url AS ClearLogoPath,
        discart.url AS DiscArtPath,
        fanart.url AS FanartPath,
        landscape.url AS LandscapePath,
        poster.url AS PosterPath
        FROM
        movie
        LEFT OUTER JOIN moviesource AS source ON (source.idSource = movie.idSource)
        LEFT OUTER JOIN art AS banner ON (banner.media_id = movie.idMovie)
        AND (banner.media_type = 'movie')
        AND (banner.type = 'banner')
        LEFT OUTER JOIN art AS clearart ON (clearart.media_id = movie.idMovie)
        AND (clearart.media_type = 'movie')
        AND (clearart.type = 'clearart')
        LEFT OUTER JOIN art AS clearlogo ON (clearlogo.media_id = movie.idMovie)
        AND (clearlogo.media_type = 'movie')
        AND (clearlogo.type = 'clearlogo')
        LEFT OUTER JOIN art AS discart ON (discart.media_id = movie.idMovie)
        AND (discart.media_type = 'movie')
        AND (discart.type = 'discart')
        LEFT OUTER JOIN art AS fanart ON (fanart.media_id = movie.idMovie)
        AND (fanart.media_type = 'movie')
        AND (fanart.type = 'fanart')
        LEFT OUTER JOIN art AS landscape ON (landscape.media_id = movie.idMovie)
        AND (landscape.media_type = 'movie')
        AND (landscape.type = 'landscape')
        LEFT OUTER JOIN art AS poster ON (poster.media_id = movie.idMovie)
        AND (poster.media_type = 'movie')
        AND (poster.type = 'poster');
      </execute>
    </command>
    <command type="DB">
      <description>edit view tvshowlist</description>
      <execute>
        DROP VIEW tvshowlist;

        CREATE VIEW tvshowlist
        AS
        SELECT
        tvshow.*,
        CASE WHEN tvshow.SortTitle IS NOT '' THEN tvshow.SortTitle ELSE tvshow.ListTitle END AS SortedTitle,
        source.strName AS Source,
        banner.url AS BannerPath,
        characterart.url AS CharacterArtPath,
        clearart.url AS ClearArtPath,
        clearlogo.url AS ClearLogoPath,
        fanart.url AS FanartPath,
        landscape.url AS LandscapePath,
        poster.url AS PosterPath,
        COUNT(DISTINCT episodelist.idEpisode) AS Episodes,
        COUNT(episodelist.Playcount) AS Playcount,
        CASE WHEN COUNT(DISTINCT episodelist.idEpisode) IS NOT 0 AND COUNT(DISTINCT episodelist.idEpisode) = COUNT(episodelist.Playcount) THEN 1 ELSE 0 END AS HasWatched,
        SUM(episodelist.New) AS NewEpisodes
        FROM
        tvshow
        LEFT OUTER JOIN tvshowsource AS source ON (source.idSource = tvshow.idSource)
        LEFT OUTER JOIN art AS banner ON (banner.media_id = tvshow.idShow)
        AND (banner.media_type = 'tvshow')
        AND (banner.type = 'banner')
        LEFT OUTER JOIN art AS characterart ON (characterart.media_id = tvshow.idShow)
        AND (characterart.media_type = 'tvshow')
        AND (characterart.type = 'characterart')
        LEFT OUTER JOIN art AS clearart ON (clearart.media_id = tvshow.idShow)
        AND (clearart.media_type = 'tvshow')
        AND (clearart.type = 'clearart')
        LEFT OUTER JOIN art AS clearlogo ON (clearlogo.media_id = tvshow.idShow)
        AND (clearlogo.media_type = 'tvshow')
        AND (clearlogo.type = 'clearlogo')
        LEFT OUTER JOIN art AS fanart ON (fanart.media_id = tvshow.idShow)
        AND (fanart.media_type = 'tvshow')
        AND (fanart.type = 'fanart')
        LEFT OUTER JOIN art AS landscape ON (landscape.media_id = tvshow.idShow)
        AND (landscape.media_type = 'tvshow')
        AND (landscape.type = 'landscape')
        LEFT OUTER JOIN art AS poster ON (poster.media_id = tvshow.idShow)
        AND (poster.media_type = 'tvshow')
        AND (poster.type = 'poster')
        LEFT OUTER JOIN episodelist ON (tvshow.idShow = episodelist.idShow)
        AND (episodelist.Missing = 0)
        GROUP BY
        tvshow.idShow;
      </execute>
    </command>
  </transaction>
  <noTransaction type="">
  </noTransaction>
<!-- 
  <noTransaction type="DB">
    <description>nd1</description>
    <execute>ne1</execute>
  </noTransaction>
-->
</CommandFile>