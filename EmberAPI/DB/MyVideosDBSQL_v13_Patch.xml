<?xml version="1.0"?>
<CommandFile xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
  <transaction name="MyVideosDBSQL_v13_to_v14">
    <command type="DB">
      <description>create table art</description>
      <execute>
        CREATE TABLE art (
        art_id      integer PRIMARY KEY,
        media_id    integer,
        media_type  text,
        type        text,
        url         text
        );

        CREATE INDEX ix_art
        ON art
        (media_id, media_type, type);
      </execute>
    </command>
    <command type="DB">
      <description>get art paths from Movies</description>
      <execute>
        INSERT INTO art
        (media_id,
        media_type,
        type,
        url)
        SELECT
        ID, 'movie' AS media_type, 'banner' AS type, BannerPath
        FROM Movies
        WHERE NOT BannerPath = "";

        INSERT INTO art
        (media_id,
        media_type,
        type,
        url)
        SELECT
        ID, 'movie' AS media_type, 'clearart' AS type, ClearArtPath
        FROM Movies
        WHERE NOT ClearArtPath = "";

        INSERT INTO art
        (media_id,
        media_type,
        type,
        url)
        SELECT
        ID, 'movie' AS media_type, 'clearlogo' AS type, ClearLogoPath
        FROM Movies
        WHERE NOT ClearLogoPath = "";

        INSERT INTO art
        (media_id,
        media_type,
        type,
        url)
        SELECT
        ID, 'movie' AS media_type, 'discart' AS type, DiscArtPath
        FROM Movies
        WHERE NOT DiscArtPath = "";

        INSERT INTO art
        (media_id,
        media_type,
        type,
        url)
        SELECT
        ID, 'movie' AS media_type, 'fanart' AS type, FanartPath
        FROM Movies
        WHERE NOT FanartPath = "";

        INSERT INTO art
        (media_id,
        media_type,
        type,
        url)
        SELECT
        ID, 'movie' AS media_type, 'landscape' AS type, LandscapePath
        FROM Movies
        WHERE NOT LandscapePath = "";

        INSERT INTO art
        (media_id,
        media_type,
        type,
        url)
        SELECT
        ID, 'movie' AS media_type, 'poster' AS type, PosterPath
        FROM Movies
        WHERE NOT PosterPath = "";
      </execute>
    </command>
    <command type="DB">
      <description>get art paths from Sets</description>
      <execute>
        INSERT INTO art
        (media_id,
        media_type,
        type,
        url)
        SELECT
        ID, 'set' AS media_type, 'banner' AS type, BannerPath
        FROM Sets
        WHERE NOT BannerPath = "";

        INSERT INTO art
        (media_id,
        media_type,
        type,
        url)
        SELECT
        ID, 'set' AS media_type, 'clearart' AS type, ClearArtPath
        FROM Sets
        WHERE NOT ClearArtPath = "";

        INSERT INTO art
        (media_id,
        media_type,
        type,
        url)
        SELECT
        ID, 'set' AS media_type, 'clearlogo' AS type, ClearLogoPath
        FROM Sets
        WHERE NOT ClearLogoPath = "";

        INSERT INTO art
        (media_id,
        media_type,
        type,
        url)
        SELECT
        ID, 'set' AS media_type, 'discart' AS type, DiscArtPath
        FROM Sets
        WHERE NOT DiscArtPath = "";

        INSERT INTO art
        (media_id,
        media_type,
        type,
        url)
        SELECT
        ID, 'set' AS media_type, 'fanart' AS type, FanartPath
        FROM Sets
        WHERE NOT FanartPath = "";

        INSERT INTO art
        (media_id,
        media_type,
        type,
        url)
        SELECT
        ID, 'set' AS media_type, 'landscape' AS type, LandscapePath
        FROM Sets
        WHERE NOT LandscapePath = "";

        INSERT INTO art
        (media_id,
        media_type,
        type,
        url)
        SELECT
        ID, 'set' AS media_type, 'poster' AS type, PosterPath
        FROM Sets
        WHERE NOT PosterPath = "";
      </execute>
    </command>
    <command type="DB">
      <description>get art paths from TVEps</description>
      <execute>
        INSERT INTO art
        (media_id,
        media_type,
        type,
        url)
        SELECT
        ID, 'episode' AS media_type, 'fanart' AS type, FanartPath
        FROM TVEps
        WHERE NOT FanartPath = "";

        INSERT INTO art
        (media_id,
        media_type,
        type,
        url)
        SELECT
        ID, 'episode' AS media_type, 'thumb' AS type, PosterPath
        FROM TVEps
        WHERE NOT PosterPath = "";
      </execute>
    </command>
    <command type="DB">
      <description>get art paths from TVShows</description>
      <execute>
        INSERT INTO art
        (media_id,
        media_type,
        type,
        url)
        SELECT
        ID, 'tvshow' AS media_type, 'banner' AS type, BannerPath
        FROM TVShows
        WHERE NOT BannerPath = "";

        INSERT INTO art
        (media_id,
        media_type,
        type,
        url)
        SELECT
        ID, 'tvshow' AS media_type, 'characterart' AS type, CharacterArtPath
        FROM TVShows
        WHERE NOT CharacterArtPath = "";

        INSERT INTO art
        (media_id,
        media_type,
        type,
        url)
        SELECT
        ID, 'tvshow' AS media_type, 'clearart' AS type, ClearArtPath
        FROM TVShows
        WHERE NOT ClearArtPath = "";

        INSERT INTO art
        (media_id,
        media_type,
        type,
        url)
        SELECT
        ID, 'tvshow' AS media_type, 'clearlogo' AS type, ClearLogoPath
        FROM TVShows
        WHERE NOT ClearLogoPath = "";

        INSERT INTO art
        (media_id,
        media_type,
        type,
        url)
        SELECT
        ID, 'tvshow' AS media_type, 'fanart' AS type, FanartPath
        FROM TVShows
        WHERE NOT FanartPath = "";

        INSERT INTO art
        (media_id,
        media_type,
        type,
        url)
        SELECT
        ID, 'tvshow' AS media_type, 'landscape' AS type, LandscapePath
        FROM TVShows
        WHERE NOT LandscapePath = "";

        INSERT INTO art
        (media_id,
        media_type,
        type,
        url)
        SELECT
        ID, 'tvshow' AS media_type, 'poster' AS type, PosterPath
        FROM TVShows
        WHERE NOT PosterPath = "";
      </execute>
    </command>
    <command type="DB">
      <description>edit/create table tvshow</description>
      <execute>
        CREATE TABLE TVShows01(
        ID,
        ListTitle,
        "New",
        Mark,
        TVShowPath,
        Source,
        TVDB,
        Lock,
        EpisodeGuide,
        Plot,
        Genre,
        Premiered,
        Studio,
        MPAA,
        Rating,
        NfoPath,
        NeedsSave,
        Language,
        Ordering,
        Status,
        ThemePath,
        EFanartsPath,
        Runtime,
        Title,
        Votes,
        EpisodeSorting
        );

        INSERT INTO TVShows01
        SELECT
        ID,
        ListTitle,
        "New",
        Mark,
        TVShowPath,
        Source,
        TVDB,
        Lock,
        EpisodeGuide,
        Plot,
        Genre,
        Premiered,
        Studio,
        MPAA,
        Rating,
        NfoPath,
        NeedsSave,
        Language,
        Ordering,
        Status,
        ThemePath,
        EFanartsPath,
        Runtime,
        Title,
        Votes,
        EpisodeSorting
        FROM TVShows;

        DROP TABLE TVShows;

        CREATE TABLE tvshow (
        idShow            integer PRIMARY KEY AUTOINCREMENT,
        ListTitle         text,
        "New"             bool DEFAULT 0,
        Mark              bool NOT NULL DEFAULT 0,
        TVShowPath        text NOT NULL,
        Source            text NOT NULL,
        TVDB              text,
        Lock              bool NOT NULL DEFAULT 0,
        EpisodeGuide      text,
        Plot              text,
        Genre             text,
        Premiered         text,
        Studio            text,
        MPAA              text,
        Rating            text,
        NfoPath           text,
        NeedsSave         bool NOT NULL DEFAULT 0,
        Language          text,
        Ordering          integer NOT NULL DEFAULT 0,
        Status            text,
        ThemePath         text,
        EFanartsPath      text,
        Runtime           text,
        Title             text,
        Votes             text,
        EpisodeSorting    integer NOT NULL DEFAULT 0
        );

        CREATE UNIQUE INDEX UniqueTVShowPath
        ON tvshow
        (TVShowPath);

        INSERT INTO tvshow
        (idShow,
        ListTitle,
        "New",
        Mark,
        TVShowPath,
        Source,
        TVDB,
        Lock,
        EpisodeGuide,
        Plot,
        Genre,
        Premiered,
        Studio,
        MPAA,
        Rating,
        NfoPath,
        NeedsSave,
        Language,
        Ordering,
        Status,
        ThemePath,
        EFanartsPath,
        Runtime,
        Title,
        Votes,
        EpisodeSorting)
        SELECT
        ID,
        ListTitle,
        "New",
        Mark,
        TVShowPath,
        Source,
        TVDB,
        Lock,
        EpisodeGuide,
        Plot,
        Genre,
        Premiered,
        Studio,
        MPAA,
        Rating,
        NfoPath,
        NeedsSave,
        Language,
        Ordering,
        Status,
        ThemePath,
        EFanartsPath,
        Runtime,
        Title,
        Votes,
        EpisodeSorting
        FROM TVShows01;

        DROP TABLE TVShows01;

        CREATE TRIGGER delete_tvshow
        AFTER DELETE
        ON tvshow
        BEGIN
        DELETE FROM actorlinktvshow WHERE idShow=old.idShow;
        DELETE FROM art WHERE media_id=old.idShow AND media_type='tvshow';
        DELETE FROM directorlinktvshow WHERE idShow=old.idShow;
        DELETE FROM genrelinktvshow WHERE idShow=old.idShow;
        DELETE FROM movielinktvshow WHERE idShow=old.idShow;
        DELETE FROM seasons WHERE idShow=old.idShow;
        DELETE FROM taglinks WHERE idMedia=old.idShow AND media_type='tvshow';
        END;
      </execute>
    </command>
    <command type="DB">
      <description>create table studio, studiolinkmovie, studiolinktvshow</description>
      <execute>
        CREATE TABLE studio (
        idStudio   integer PRIMARY KEY,
        strStudio  text
        );

        CREATE TABLE studiolinkmovie (
        idStudio  integer,
        idMovie   integer
        );

        CREATE UNIQUE INDEX ix_studiolinkmovie_1
        ON studiolinkmovie
        (idStudio, idMovie);

        CREATE UNIQUE INDEX ix_studiolinkmovie_2
        ON studiolinkmovie
        (idMovie, idStudio);

        CREATE TABLE studiolinktvshow (
        idStudio  integer,
        idShow    integer
        );

        CREATE UNIQUE INDEX ix_studiolinktvshow_1
        ON studiolinktvshow
        (idStudio, idShow);

        CREATE UNIQUE INDEX ix_studiolinktvshow_2
        ON studiolinktvshow
        (idShow, idStudio);
      </execute>
    </command>
    <command type="DB">
      <description>create table writerlinkepisode, writerlinkmovie</description>
      <execute>
        CREATE TABLE writerlinkepisode (
        idWriter   integer,
        idEpisode  integer
        );

        CREATE UNIQUE INDEX ix_writerlinkepisode_1
        ON writerlinkepisode
        (idWriter, idEpisode);

        CREATE UNIQUE INDEX ix_writerlinkepisode_2
        ON writerlinkepisode
        (idEpisode, idWriter);
        
        CREATE TABLE writerlinkmovie (
        idWriter  integer,
        idMovie   integer
        );

        CREATE UNIQUE INDEX ix_writerlinkmovie_1
        ON writerlinkmovie
        (idWriter, idMovie);

        CREATE UNIQUE INDEX ix_writerlinkmovie_2
        ON writerlinkmovie
        (idMovie, idWriter);
      </execute>
    </command>
    <command type="DB">
      <description>create table genre, genrelinkmovie, genrelinktvshow</description>
      <execute>
        CREATE TABLE genre (
        idGenre   integer PRIMARY KEY,
        strGenre  text
        );

        CREATE TABLE genrelinkmovie (
        idGenre  integer,
        idMovie  integer
        );

        CREATE UNIQUE INDEX ix_genrelinkmovie_1
        ON genrelinkmovie
        (idGenre, idMovie);

        CREATE UNIQUE INDEX ix_genrelinkmovie_2
        ON genrelinkmovie
        (idMovie, idGenre);

        CREATE TABLE genrelinktvshow (
        idGenre  integer,
        idShow   integer
        );

        CREATE UNIQUE INDEX ix_genrelinktvshow_1
        ON genrelinktvshow
        (idGenre, idShow);

        CREATE UNIQUE INDEX ix_genrelinktvshow_2
        ON genrelinktvshow
        (idShow, idGenre);
      </execute>
    </command>
    <command type="DB">
      <description>edit/create table actors</description>
      <execute>
        CREATE TABLE Actors01(
        Name,
        Thumb
        );

        INSERT INTO Actors01
        SELECT
        Name,
        Thumb
        FROM Actors;

        DROP TABLE Actors;

        CREATE TABLE actors (
        idActor INTEGER PRIMARY KEY AUTOINCREMENT,
        strActor TEXT NOT NULL,
        strThumb TEXT
        );

        INSERT INTO actors
        (strActor,
        strThumb)
        SELECT
        Name,
        Thumb
        FROM Actors01;

        DROP TABLE Actors01;

        CREATE TRIGGER delete_person
        AFTER DELETE
        ON actors
        BEGIN
        DELETE FROM art WHERE media_id=old.idActor AND media_type IN ('actor','artist','writer','director');
        END;
      </execute>
    </command>
    <command type="DB">
      <description>create table directorlinkepisode, directorlinkmovie, directorlinktvshow</description>
      <execute>
        CREATE TABLE directorlinkepisode (
        idDirector  integer,
        idEpisode   integer
        );

        CREATE UNIQUE INDEX ix_directorlinkepisode_1
        ON directorlinkepisode
        (idDirector, idEpisode);

        CREATE UNIQUE INDEX ix_directorlinkepisode_2
        ON directorlinkepisode
        (idEpisode, idDirector);

        CREATE TABLE directorlinkmovie (
        idDirector  integer,
        idMovie     integer
        );

        CREATE UNIQUE INDEX ix_directorlinkmovie_1
        ON directorlinkmovie
        (idDirector, idMovie);

        CREATE UNIQUE INDEX ix_directorlinkmovie_2
        ON directorlinkmovie
        (idMovie, idDirector);

        CREATE TABLE directorlinktvshow (
        idDirector  integer,
        idShow      integer
        );

        CREATE UNIQUE INDEX ix_directorlinktvshow_1
        ON directorlinktvshow
        (idDirector, idShow);

        CREATE UNIQUE INDEX ix_directorlinktvshow_2
        ON directorlinktvshow
        (idShow, idDirector);
      </execute>
    </command>
    <command type="DB">
      <description>create table country, countrylinkmovie</description>
      <execute>
        CREATE TABLE country (
        idCountry   integer PRIMARY KEY,
        strCountry  text
        );

        CREATE TABLE countrylinkmovie (
        idCountry  integer,
        idMovie    integer
        );

        CREATE UNIQUE INDEX ix_countrylinkmovie_1
        ON countrylinkmovie
        (idCountry, idMovie);

        CREATE UNIQUE INDEX ix_countrylinkmovie_2
        ON countrylinkmovie
        (idMovie, idCountry);
      </execute>
    </command>
    <command type="DB">
      <description>edit/create table actorlinkepisode</description>
      <execute>
        CREATE TABLE TVEpActors01(
        TVEpID,
        ActorName,
        Role
        );

        INSERT INTO TVEpActors01
        SELECT
        TVEpID,
        ActorName,
        Role
        FROM TVEpActors;

        DROP TABLE TVEpActors;

        CREATE TABLE actorlinkepisode (
        idActor integer,
        idEpisode integer,
        strRole text,
        iOrder integer
        );

        INSERT INTO actorlinkepisode
        (idActor,
        idEpisode,
        strRole)
        SELECT
        A.idActor,
        B.TVEpID,
        B.Role
        FROM
        actors A,
        TVEpActors01 B
        WHERE
        A.strActor = B.ActorName;

        DROP TABLE TVEpActors01;
        
        CREATE UNIQUE INDEX ix_actorlinkepisode_1
        ON actorlinkepisode
        (idActor, idEpisode);

        CREATE UNIQUE INDEX ix_actorlinkepisode_2
        ON actorlinkepisode
        (idEpisode, idActor);
      </execute>
    </command>
    <command type="DB">
      <description>edit/create table actorlinkmovie</description>
      <execute>
        CREATE TABLE MoviesActors01(
        MovieID,
        ActorName,
        Role
        );

        INSERT INTO MoviesActors01
        SELECT
        MovieID,
        ActorName,
        Role
        FROM MoviesActors;

        DROP TABLE MoviesActors;

        CREATE TABLE actorlinkmovie (
        idActor integer,
        idMovie integer,
        strRole text,
        iOrder integer
        );

        INSERT INTO actorlinkmovie
        (idActor,
        idMovie,
        strRole)
        SELECT
        A.idActor,
        B.MovieID,
        B.Role
        FROM
        actors A,
        MoviesActors01 B
        WHERE
        A.strActor = B.ActorName;

        DROP TABLE MoviesActors01;

        CREATE UNIQUE INDEX ix_actorlinkmovie_1
        ON actorlinkmovie
        (idActor, idMovie);

        CREATE UNIQUE INDEX ix_actorlinkmovie_2
        ON actorlinkmovie
        (idMovie, idActor);
      </execute>
    </command>
    <command type="DB">
      <description>edit/create table actorlinktvshow</description>
      <execute>
        CREATE TABLE TVShowActors01(
        TVShowID,
        ActorName,
        Role
        );

        INSERT INTO TVShowActors01
        SELECT
        TVShowID,
        ActorName,
        Role
        FROM TVShowActors;

        DROP TABLE TVShowActors;

        CREATE TABLE actorlinktvshow (
        idActor integer,
        idShow integer,
        strRole text,
        iOrder integer
        );

        INSERT INTO actorlinktvshow
        (idActor,
        idShow,
        strRole)
        SELECT
        A.idActor,
        B.TVShowID,
        B.Role
        FROM
        actors A,
        TVShowActors01 B
        WHERE
        A.strActor = B.ActorName;

        DROP TABLE TVShowActors01;

        CREATE UNIQUE INDEX ix_actorlinktvshow_1
        ON actorlinktvshow
        (idActor, idShow);

        CREATE UNIQUE INDEX ix_actorlinktvshow_2
        ON actorlinktvshow
        (idShow, idActor);
      </execute>
    </command>
    <command type="DB">
      <description>create table tag</description>
      <execute>
        CREATE TABLE tag (
        idTag   integer PRIMARY KEY,
        strTag  text
        );

        CREATE UNIQUE INDEX ix_tag_1
        ON tag
        (strTag);
      </execute>
    </command>
    <command type="DB">
      <description>create table taglinks</description>
      <execute>
        CREATE TABLE taglinks (
        idTag       integer,
        idMedia     integer,
        media_type  text
        );

        CREATE UNIQUE INDEX ix_taglinks_1
        ON taglinks
        (idTag, media_type, idMedia);

        CREATE UNIQUE INDEX ix_taglinks_2
        ON taglinks
        (idMedia, media_type, idTag);

        CREATE INDEX ix_taglinks_3
        ON taglinks
        (media_type);

        CREATE TRIGGER delete_tag
        AFTER DELETE
        ON taglinks
        BEGIN DELETE FROM tag WHERE idTag=old.idTag AND idTag NOT IN (SELECT DISTINCT idTag FROM taglinks);
        END;
      </execute>
    </command>
    <command type="DB">
      <description>edit/create table movie</description>
      <execute>
        CREATE TABLE Movies01(
        ID,
        MoviePath,
        Type,
        ListTitle,
        HasSub,
        "New",
        Mark,
        Source,
        Imdb,
        Lock,
        Title,
        OriginalTitle,
        Year,
        Rating,
        Votes,
        MPAA,
        Top250,
        Country,
        Outline,
        Plot,
        Tagline,
        Certification,
        Genre,
        Studio,
        Runtime,
        ReleaseDate,
        Director,
        Credits,
        Playcount,
        Trailer,
        EThumbsPath,
        NfoPath,
        TrailerPath,
        SubPath,
        FanartURL,
        UseFolder,
        OutOfTolerance,
        VideoSource,
        NeedsSave,
        SortTitle,
        DateAdded,
        EFanartsPath,
        ThemePath,
        TMDB,
        TMDBColID,
        DateModified,
        MarkCustom1,
        MarkCustom2,
        MarkCustom3,
        MarkCustom4,
        HasSet
        );

        INSERT INTO Movies01
        SELECT
        ID,
        MoviePath,
        Type,
        ListTitle,
        HasSub,
        "New",
        Mark,
        Source,
        Imdb,
        Lock,
        Title,
        OriginalTitle,
        Year,
        Rating,
        Votes,
        MPAA,
        Top250,
        Country,
        Outline,
        Plot,
        Tagline,
        Certification,
        Genre,
        Studio,
        Runtime,
        ReleaseDate,
        Director,
        Credits,
        Playcount,
        Trailer,
        EThumbsPath,
        NfoPath,
        TrailerPath,
        SubPath,
        FanartURL,
        UseFolder,
        OutOfTolerance,
        VideoSource,
        NeedsSave,
        SortTitle,
        DateAdded,
        EFanartsPath,
        ThemePath,
        TMDB,
        TMDBColID,
        DateModified,
        MarkCustom1,
        MarkCustom2,
        MarkCustom3,
        MarkCustom4,
        HasSet
        FROM Movies;

        DROP TABLE Movies;

        CREATE TABLE movie (
        idMovie         integer PRIMARY KEY AUTOINCREMENT,
        MoviePath       text,
        Type            bool,
        ListTitle       text,
        HasSub          bool NOT NULL DEFAULT 0,
        "New"           bool NOT NULL DEFAULT 0,
        Mark            bool NOT NULL DEFAULT 0,
        Source          text,
        Imdb            text,
        Lock            bool,
        Title           text,
        OriginalTitle   text,
        Year            text,
        Rating          text,
        Votes           text,
        MPAA            text,
        Top250          text,
        Country         text,
        Outline         text,
        Plot            text,
        Tagline         text,
        Certification   text,
        Genre           text,
        Studio          text,
        Runtime         text,
        ReleaseDate     text,
        Director        text,
        Credits         text,
        Playcount       text,
        Trailer         text,
        EThumbsPath     text,
        NfoPath         text,
        TrailerPath     text,
        SubPath         text,
        FanartURL       text,
        UseFolder       bool,
        OutOfTolerance  bool,
        VideoSource     text,
        NeedsSave       bool,
        SortTitle       text,
        DateAdded       integer,
        EFanartsPath    text,
        ThemePath       text,
        TMDB            text,
        TMDBColID       text,
        DateModified    integer,
        MarkCustom1     bool NOT NULL DEFAULT 0,
        MarkCustom2     bool NOT NULL DEFAULT 0,
        MarkCustom3     bool NOT NULL DEFAULT 0,
        MarkCustom4     bool NOT NULL DEFAULT 0,
        HasSet          bool NOT NULL DEFAULT 0
        );

        INSERT INTO movie
        (idMovie,
        MoviePath,
        Type,
        ListTitle,
        HasSub,
        "New",
        Mark,
        Source,
        Imdb,
        Lock,
        Title,
        OriginalTitle,
        Year,
        Rating,
        Votes,
        MPAA,
        Top250,
        Country,
        Outline,
        Plot,
        Tagline,
        Certification,
        Genre,
        Studio,
        Runtime,
        ReleaseDate,
        Director,
        Credits,
        Playcount,
        Trailer,
        EThumbsPath,
        NfoPath,
        TrailerPath,
        SubPath,
        FanartURL,
        UseFolder,
        OutOfTolerance,
        VideoSource,
        NeedsSave,
        SortTitle,
        DateAdded,
        EFanartsPath,
        ThemePath,
        TMDB,
        TMDBColID,
        DateModified,
        MarkCustom1,
        MarkCustom2,
        MarkCustom3,
        MarkCustom4,
        HasSet)
        SELECT
        ID,
        MoviePath,
        Type,
        ListTitle,
        HasSub,
        "New",
        Mark,
        Source,
        Imdb,
        Lock,
        Title,
        OriginalTitle,
        Year,
        Rating,
        Votes,
        MPAA,
        Top250,
        Country,
        Outline,
        Plot,
        Tagline,
        Certification,
        Genre,
        Studio,
        Runtime,
        ReleaseDate,
        Director,
        Credits,
        Playcount,
        Trailer,
        EThumbsPath,
        NfoPath,
        TrailerPath,
        SubPath,
        FanartURL,
        UseFolder,
        OutOfTolerance,
        VideoSource,
        NeedsSave,
        SortTitle,
        DateAdded,
        EFanartsPath,
        ThemePath,
        TMDB,
        TMDBColID,
        DateModified,
        MarkCustom1,
        MarkCustom2,
        MarkCustom3,
        MarkCustom4,
        HasSet
        FROM Movies01;

        DROP TABLE Movies01;

        CREATE TRIGGER delete_movie
        AFTER DELETE
        ON movie
        BEGIN
        DELETE FROM actorlinkmovie WHERE idMovie=old.idMovie;
        DELETE FROM art WHERE media_id=old.idMovie AND media_type='movie';
        DELETE FROM countrylinkmovie WHERE idMovie=old.idMovie;
        DELETE FROM directorlinkmovie WHERE idMovie=old.idMovie;
        DELETE FROM movielinktvshow WHERE idMovie=old.idMovie;
        DELETE FROM studiolinkmovie WHERE idMovie=old.idMovie;
        DELETE FROM taglinks WHERE idMedia=old.idMovie AND media_type='movie';
        DELETE FROM writerlinkmovie WHERE idMovie=old.idMovie;
        DELETE FROM MoviesAStreams WHERE MovieID=old.idMovie;
        DELETE FROM MoviesSets WHERE MovieID=old.idMovie;
        DELETE FROM MoviesSubs WHERE MovieID=old.idMovie;
        DELETE FROM MoviesVStreams WHERE MovieID=old.idMovie;
        END;
      </execute>
    </command>
    <command type="DB">
      <description>create table movielinktvshow</description>
      <execute>
        CREATE TABLE movielinktvshow (
        idMovie  integer,
        idShow   integer
        );

        CREATE UNIQUE INDEX ix_movielinktvshow_1
        ON movielinktvshow
        (idShow, idMovie);

        CREATE UNIQUE INDEX ix_movielinktvshow_2
        ON movielinktvshow
        (idMovie, idShow);
      </execute>
    </command>
    <command type="DB">
      <description>edit/create table episode</description>
      <execute>
        CREATE TABLE TVEps01(
        ID,
        TVShowID,
        Episode,
        Title,
        "New",
        Mark,
        TVEpPathID,
        Source,
        Lock,
        Season,
        Rating,
        Plot,
        Aired,
        Director,
        Credits,
        NfoPath,
        NeedsSave,
        Missing,
        Playcount,
        DisplaySeason,
        DisplayEpisode,
        DateAdded,
        Runtime,
        Votes,
        VideoSource,
        HasSub
        );

        INSERT INTO TVEps01
        SELECT
        ID,
        TVShowID,
        Episode,
        Title,
        "New",
        Mark,
        TVEpPathID,
        Source,
        Lock,
        Season,
        Rating,
        Plot,
        Aired,
        Director,
        Credits,
        NfoPath,
        NeedsSave,
        Missing,
        Playcount,
        DisplaySeason,
        DisplayEpisode,
        DateAdded,
        Runtime,
        Votes,
        VideoSource,
        HasSub
        FROM TVEps;

        DROP TABLE TVEps;

        CREATE TABLE episode (
        idEpisode       integer PRIMARY KEY AUTOINCREMENT,
        idShow          integer NOT NULL,
        Episode         integer,
        Title           text,
        "New"           bool DEFAULT 0,
        Mark            bool NOT NULL DEFAULT 0,
        TVEpPathID      integer NOT NULL,
        Source          text NOT NULL,
        Lock            bool NOT NULL DEFAULT 0,
        Season          integer,
        Rating          text,
        Plot            text,
        Aired           text,
        Director        text,
        Credits         text,
        NfoPath         text,
        NeedsSave       bool NOT NULL DEFAULT 0,
        Missing         bool NOT NULL DEFAULT 0,
        Playcount       text,
        DisplaySeason   integer,
        DisplayEpisode  integer,
        DateAdded       integer,
        Runtime         text,
        Votes           text,
        VideoSource     text,
        HasSub          bool NOT NULL DEFAULT 0
        );

        INSERT INTO episode
        (idEpisode,
        idShow,
        Episode,
        Title,
        "New",
        Mark,
        TVEpPathID,
        Source,
        Lock,
        Season,
        Rating,
        Plot,
        Aired,
        Director,
        Credits,
        NfoPath,
        NeedsSave,
        Missing,
        Playcount,
        DisplaySeason,
        DisplayEpisode,
        DateAdded,
        Runtime,
        Votes,
        VideoSource,
        HasSub)
        SELECT
        ID,
        TVShowID,
        Episode,
        Title,
        "New",
        Mark,
        TVEpPathID,
        Source,
        Lock,
        Season,
        Rating,
        Plot,
        Aired,
        Director,
        Credits,
        NfoPath,
        NeedsSave,
        Missing,
        Playcount,
        DisplaySeason,
        DisplayEpisode,
        DateAdded,
        Runtime,
        Votes,
        VideoSource,
        HasSub
        FROM TVEps01;

        DROP TABLE TVEps01;

        CREATE TRIGGER delete_episode
        AFTER DELETE
        ON episode
        BEGIN
        DELETE FROM actorlinkepisode WHERE idEpisode=old.idEpisode;
        DELETE FROM art WHERE media_id=old.idEpisode AND media_type='episode';
        DELETE FROM directorlinkepisode WHERE idEpisode=old.idEpisode;
        DELETE FROM writerlinkepisode WHERE idEpisode=old.idEpisode;
        DELETE FROM TVEpPaths WHERE ID=old.TVEpPathID;
        DELETE FROM TVVStreams WHERE TVEpID=old.idEpisode;
        DELETE FROM TVAStreams WHERE TVEpID=old.idEpisode;
        DELETE FROM TVSubs WHERE TVEpID=old.idEpisode;
        END;
      </execute>
    </command>
    <command type="DB">
      <description>edit/create table seasons (step 1 for seasons table)</description>
      <execute>
        CREATE TABLE TVSeason01(
        TVShowID,
        SeasonText,
        Season,
        PosterPath,
        FanartPath,
        Lock,
        Mark,
        "New",
        BannerPath,
        LandscapePath
        );

        INSERT INTO TVSeason01
        SELECT
        TVShowID,
        SeasonText,
        Season,
        PosterPath,
        FanartPath,
        Lock,
        Mark,
        "New",
        BannerPath,
        LandscapePath
        FROM TVSeason;

        DROP TABLE TVSeason;

        CREATE TABLE seasons (
        idSeason       integer PRIMARY KEY,
        idShow         integer,
        Season         integer,
        SeasonText     text,
        PosterPath     text,
        FanartPath     text,
        Lock           bool NOT NULL DEFAULT 0,
        Mark           bool NOT NULL DEFAULT 0,
        "New"          bool NOT NULL DEFAULT 0,
        BannerPath     text,
        LandscapePath  text
        );

        INSERT INTO seasons
        (idShow,
        Season,
        SeasonText,
        PosterPath,
        FanartPath,
        Lock,
        Mark,
        "New",
        BannerPath,
        LandscapePath)
        SELECT
        TVShowID,
        Season,
        SeasonText,
        PosterPath,
        FanartPath,
        Lock,
        Mark,
        "New",
        BannerPath,
        LandscapePath
        FROM TVSeason01;

        DROP TABLE TVSeason01;

        CREATE UNIQUE INDEX ix_seasons
        ON seasons
        (idShow, season);

        CREATE TRIGGER delete_season
        AFTER DELETE
        ON seasons
        BEGIN
        DELETE FROM art WHERE media_id=old.idSeason AND media_type='season';
        END;
      </execute>
    </command>
    <command type="DB">
      <description>get art paths from seasons (step 2 for seasons table)</description>
      <execute>
        INSERT INTO art
        (media_id,
        media_type,
        type,
        url)
        SELECT
        idSeason, 'season' AS media_type, 'banner' AS type, BannerPath
        FROM seasons
        WHERE NOT BannerPath = "";

        INSERT INTO art
        (media_id,
        media_type,
        type,
        url)
        SELECT
        idSeason, 'season' AS media_type, 'fanart' AS type, FanartPath
        FROM seasons
        WHERE NOT FanartPath = "";

        INSERT INTO art
        (media_id,
        media_type,
        type,
        url)
        SELECT
        idSeason, 'season' AS media_type, 'landscape' AS type, LandscapePath
        FROM seasons
        WHERE NOT LandscapePath = "";

        INSERT INTO art
        (media_id,
        media_type,
        type,
        url)
        SELECT
        idSeason, 'season' AS media_type, 'poster' AS type, PosterPath
        FROM seasons
        WHERE NOT PosterPath = "";
      </execute>
    </command>
    <command type="DB">
      <description>remove no longer needed rows from seasons (step 3 for seasons table)</description>
      <execute>
        CREATE TABLE seasons01(
        idSeason,
        idShow,
        Season,
        SeasonText,
        Lock,
        Mark,
        "New"
        );

        INSERT INTO seasons01
        SELECT
        idSeason,
        idShow,
        Season,
        SeasonText,
        Lock,
        Mark,
        "New"
        FROM seasons;

        DROP TABLE seasons;

        CREATE TABLE seasons (
        idSeason       integer PRIMARY KEY,
        idShow         integer,
        Season         integer,
        SeasonText     text,
        Lock           bool NOT NULL DEFAULT 0,
        Mark           bool NOT NULL DEFAULT 0,
        "New"          bool NOT NULL DEFAULT 0
        );

        CREATE UNIQUE INDEX ix_seasons
        ON seasons
        (idShow, Season);

        CREATE TRIGGER delete_season
        AFTER DELETE
        ON seasons
        BEGIN
        DELETE FROM art WHERE media_id=old.idSeason AND media_type='season';
        END;

        INSERT INTO seasons
        (idSeason,
        idShow,
        Season,
        SeasonText,
        Lock,
        Mark,
        "New")
        SELECT
        idSeason,
        idShow,
        Season,
        SeasonText,
        Lock,
        Mark,
        "New"
        FROM seasons01;

        DROP TABLE seasons01;
      </execute>
    </command>
    <command type="DB">
      <description>edit/create table sets</description>
      <execute>
        CREATE TABLE Sets01(
        ID,
        ListTitle,
        NfoPath,
        TMDBColID,
        Plot,
        SetName,
        "New",
        Mark,
        Lock
        );

        INSERT INTO Sets01
        SELECT
        ID,
        ListTitle,
        NfoPath,
        TMDBColID,
        Plot,
        SetName,
        "New",
        Mark,
        Lock
        FROM Sets;

        DROP TABLE Sets;

        CREATE TABLE sets (
        idSet          integer PRIMARY KEY AUTOINCREMENT,
        ListTitle      text NOT NULL,
        NfoPath        text,
        TMDBColID      text,
        Plot           text,
        SetName        text,
        "New"          bool NOT NULL DEFAULT 0,
        Mark           bool NOT NULL DEFAULT 0,
        Lock           bool NOT NULL DEFAULT 0
        );

        INSERT INTO sets
        (idSet,
        ListTitle,
        NfoPath,
        TMDBColID,
        Plot,
        SetName,
        "New",
        Mark,
        Lock)
        SELECT
        ID,
        ListTitle,
        NfoPath,
        TMDBColID,
        Plot,
        SetName,
        "New",
        Mark,
        Lock
        FROM Sets01;

        DROP TABLE Sets01;

        CREATE TRIGGER delete_set
        AFTER DELETE
        ON sets
        BEGIN
        DELETE FROM art WHERE media_id=old.idSet AND media_type='set';
        END;
      </execute>
    </command>
    <command type="DB">
      <description>remove table MoviesFanart/MoviesPosters</description>
      <execute>
        DROP TABLE MoviesFanart;
        DROP TABLE MoviesPosters;
      </execute>
    </command>
    <command type="DB">
      <description>create view episodelist</description>
      <execute>
        CREATE VIEW episodelist
        AS
        SELECT
        episode.*,
        fanart.url AS FanartPath,
        poster.url AS PosterPath
        FROM
        episode
        LEFT OUTER JOIN art AS fanart ON (fanart.media_id = episode.idEpisode)
        AND (fanart.media_type = 'episode')
        AND (fanart.type = 'fanart')
        LEFT OUTER JOIN art AS poster ON (poster.media_id = episode.idEpisode)
        AND (poster.media_type = 'episode')
        AND (poster.type = 'thumb');
      </execute>
    </command>
    <command type="DB">
      <description>create view movielist</description>
      <execute>
        CREATE VIEW movielist
        AS
        SELECT
        movie.*,
        banner.url AS BannerPath,
        clearart.url AS ClearArtPath,
        clearlogo.url AS ClearLogoPath,
        discart.url AS DiscArtPath,
        fanart.url AS FanartPath,
        landscape.url AS LandscapePath,
        poster.url AS PosterPath
        FROM
        movie
        LEFT OUTER JOIN art AS banner ON (banner.media_id = movie.idMovie)
        AND (banner.media_type = 'movie')
        AND (banner.type = 'banner')
        LEFT OUTER JOIN art AS clearart ON (clearart.media_id = movie.idMovie)
        AND (clearart.media_type = 'movie')
        AND (clearart.type = 'clearart')
        LEFT OUTER JOIN art AS clearlogo ON (clearlogo.media_id = movie.idMovie)
        AND (clearlogo.media_type = 'movie')
        AND (clearlogo.type = 'clearlogo')
        LEFT OUTER JOIN art AS discart ON (discart.media_id = movie.idMovie)
        AND (discart.media_type = 'movie')
        AND (discart.type = 'discart')
        LEFT OUTER JOIN art AS fanart ON (fanart.media_id = movie.idMovie)
        AND (fanart.media_type = 'movie')
        AND (fanart.type = 'fanart')
        LEFT OUTER JOIN art AS landscape ON (landscape.media_id = movie.idMovie)
        AND (landscape.media_type = 'movie')
        AND (landscape.type = 'landscape')
        LEFT OUTER JOIN art AS poster ON (poster.media_id = movie.idMovie)
        AND (poster.media_type = 'movie')
        AND (poster.type = 'poster');
      </execute>
    </command>
    <command type="DB">
      <description>create view setslist</description>
      <execute>
        CREATE VIEW setslist
        AS
        SELECT
        sets.*,
        banner.url AS BannerPath,
        clearart.url AS ClearArtPath,
        clearlogo.url AS ClearLogoPath,
        discart.url AS DiscArtPath,
        fanart.url AS FanartPath,
        landscape.url AS LandscapePath,
        poster.url AS PosterPath,
        COUNT(MoviesSets.MovieID) AS 'Count'
        FROM
        sets
        LEFT OUTER JOIN art AS banner ON (banner.media_id = sets.idSet)
        AND (banner.media_type = 'set')
        AND (banner.type = 'banner')
        LEFT OUTER JOIN art AS clearart ON (clearart.media_id = sets.idSet)
        AND (clearart.media_type = 'set')
        AND (clearart.type = 'clearart')
        LEFT OUTER JOIN art AS clearlogo ON (clearlogo.media_id = sets.idSet)
        AND (clearlogo.media_type = 'set')
        AND (clearlogo.type = 'clearlogo')
        LEFT OUTER JOIN art AS discart ON (discart.media_id = sets.idSet)
        AND (discart.media_type = 'set')
        AND (discart.type = 'discart')
        LEFT OUTER JOIN art AS fanart ON (fanart.media_id = sets.idSet)
        AND (fanart.media_type = 'set')
        AND (fanart.type = 'fanart')
        LEFT OUTER JOIN art AS landscape ON (landscape.media_id = sets.idSet)
        AND (landscape.media_type = 'set')
        AND (landscape.type = 'landscape')
        LEFT OUTER JOIN art AS poster ON (poster.media_id = sets.idSet)
        AND (poster.media_type = 'set')
        AND (poster.type = 'poster')
        LEFT OUTER JOIN MoviesSets ON sets.idSet = MoviesSets.SetID
        GROUP BY sets.idSet;
      </execute>
    </command>
    <command type="DB">
      <description>create view seasonslist</description>
      <execute>
        CREATE VIEW seasonslist
        AS
        SELECT
        seasons.*,
        banner.url AS BannerPath,
        fanart.url AS FanartPath,
        landscape.url AS LandscapePath,
        poster.url AS PosterPath,
        COUNT(DISTINCT episodelist.idEpisode) AS Episodes,
        COUNT(episodelist.Playcount) AS Playcount,
        CASE WHEN COUNT(DISTINCT episodelist.idEpisode) IS NOT 0 AND COUNT(DISTINCT episodelist.idEpisode) = COUNT(episodelist.Playcount) THEN 1 ELSE 0 END AS HasWatched
        FROM
        seasons
        LEFT OUTER JOIN art AS banner ON (banner.media_id = seasons.idSeason)
        AND (banner.media_type = 'season')
        AND (banner.type = 'banner')
        LEFT OUTER JOIN art AS fanart ON (fanart.media_id = seasons.idSeason)
        AND (fanart.media_type = 'season')
        AND (fanart.type = 'fanart')
        LEFT OUTER JOIN art AS landscape ON (landscape.media_id = seasons.idSeason)
        AND (landscape.media_type = 'season')
        AND (landscape.type = 'landscape')
        LEFT OUTER JOIN art AS poster ON (poster.media_id = seasons.idSeason)
        AND (poster.media_type = 'season')
        AND (poster.type = 'poster')
        LEFT OUTER JOIN episodelist ON (seasons.Season = episodelist.Season)
        AND (seasons.idShow = episodelist.idShow)
        AND (episodelist.Missing = 0)
        GROUP BY
        seasons.idSeason;
      </execute>
    </command>
    <command type="DB">
      <description>create view tvshowlist</description>
      <execute>
        CREATE VIEW tvshowlist
        AS
        SELECT
        tvshow.*,
        banner.url AS BannerPath,
        characterart.url AS CharacterArtPath,
        clearart.url AS ClearArtPath,
        clearlogo.url AS ClearLogoPath,
        fanart.url AS FanartPath,
        landscape.url AS LandscapePath,
        poster.url AS PosterPath,
        COUNT(DISTINCT episodelist.idEpisode) AS Episodes,
        COUNT(episodelist.Playcount) AS Playcount,
        CASE WHEN COUNT(DISTINCT episodelist.idEpisode) IS NOT 0 AND COUNT(DISTINCT episodelist.idEpisode) = COUNT(episodelist.Playcount) THEN 1 ELSE 0 END AS HasWatched
        FROM
        tvshow
        LEFT OUTER JOIN art AS banner ON (banner.media_id = tvshow.idShow)
        AND (banner.media_type = 'tvshow')
        AND (banner.type = 'banner')
        LEFT OUTER JOIN art AS characterart ON (characterart.media_id = tvshow.idShow)
        AND (characterart.media_type = 'tvshow')
        AND (characterart.type = 'characterart')
        LEFT OUTER JOIN art AS clearart ON (clearart.media_id = tvshow.idShow)
        AND (clearart.media_type = 'tvshow')
        AND (clearart.type = 'clearart')
        LEFT OUTER JOIN art AS clearlogo ON (clearlogo.media_id = tvshow.idShow)
        AND (clearlogo.media_type = 'tvshow')
        AND (clearlogo.type = 'clearlogo')
        LEFT OUTER JOIN art AS fanart ON (fanart.media_id = tvshow.idShow)
        AND (fanart.media_type = 'tvshow')
        AND (fanart.type = 'fanart')
        LEFT OUTER JOIN art AS landscape ON (landscape.media_id = tvshow.idShow)
        AND (landscape.media_type = 'tvshow')
        AND (landscape.type = 'landscape')
        LEFT OUTER JOIN art AS poster ON (poster.media_id = tvshow.idShow)
        AND (poster.media_type = 'tvshow')
        AND (poster.type = 'poster')
        LEFT OUTER JOIN episodelist ON (tvshow.idShow = episodelist.idShow)
        AND (episodelist.Missing = 0)
        GROUP BY
        tvshow.idShow;
      </execute>
    </command>
  </transaction>
  <noTransaction type="">
  </noTransaction>
<!-- 
  <noTransaction type="DB">
    <description>nd1</description>
    <execute>ne1</execute>
  </noTransaction>
-->
</CommandFile>